generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String    @id @default(uuid())
  name        String
  domain      String?   @unique
  address     String?
  phoneNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  regions     Region[]
  routes      Route[]
  drivers     Driver[]
  vehicles    Vehicle[]
  settings    Json?
  orders      Order[]
  customers   Customer[]
  invitations Invitation[]
  integrations Integration[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  auditLogs AuditLog[]
  memberships Membership[]
}

model Role {
  id          String      @id @default(uuid())
  name        String
  description String?
  permissions Permission[]
  users       User[]
  invitations Invitation[]
  memberships Membership[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String
  description String?
  roles       Role[]
}

model Driver {
  id            String          @id @default(uuid())
  tenantId      String
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  name          String
  licenseNumber String
  licenseCategory String
  licenseExpiry DateTime
  phoneNumber   String?
  email         String?
  address       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  payments      DriverPayment[]
  vehicles      Vehicle[]
  routes        Route[]
}

model Vehicle {
  id            String     @id @default(uuid())
  tenantId      String
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  licensePlate  String
  model         String
  manufacturer  String?
  year          Int?
  capacity      Float
  driverId      String?
  driver        Driver?    @relation(fields: [driverId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  routes        Route[]
}

model Region {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  name        String
  startZip    String
  endZip      String
  regionValue Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Route {
  id          String     @id @default(uuid())
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  driverId    String
  driver      Driver     @relation(fields: [driverId], references: [id])
  vehicleId   String
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id])
  totalWeight Float
  totalValue  Float
  status      String
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id                     String    @id @default(uuid())
  tenantId               String
  tenant                 Tenant    @relation(fields: [tenantId], references: [id])
  customerId             String
  customer               Customer  @relation(fields: [customerId], references: [id])
  routeId                String?
  route                  Route?    @relation(fields: [routeId], references: [id])
  status                 String
  weight                 Float
  value                  Float
  priority               String
  deliveryAddress        String
  deliveryCity           String
  deliveryState          String
  deliveryZip            String
  deliveryInstructions   String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
}

model Customer {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  name        String
  email       String?
  phoneNumber String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  orders      Order[]
}

model DriverPayment {
  id          String   @id @default(uuid())
  driverId    String
  driver      Driver   @relation(fields: [driverId], references: [id])
  amount      Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String
  details     Json?
  createdAt   DateTime @default(now())
}

model Invitation {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  email       String
  roleId      String
  role        Role     @relation(fields: [roleId], references: [id])
  sentAt      DateTime @default(now())
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Integration {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  provider    String
  apiKey      String
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  domain      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  memberships Membership[]
}

model Membership {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  roleId      String
  role        Role     @relation(fields: [roleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
